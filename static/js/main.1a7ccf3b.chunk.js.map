{"version":3,"sources":["components/NotFound.js","components/Painting.js","components/Header.js","components/PaintingGrid.js","components/PaintingDetail.js","components/Router.js","serviceWorker.js","index.js"],"names":["NotFound","Painting","navigateToDetail","props","history","push","slug","className","onClick","this","src","thumbnail","alt","title","date","React","Component","Header","navigateToHome","window","location","PaintingGrid","_isMounted","state","artworks","displayCount","searchQuery","handleScroll","lastPainting","document","querySelector","lastPaintingOffset","offsetTop","clientHeight","pageYOffset","innerHeight","setState","handleSearch","event","currentTarget","value","getData","addEventListener","e","fetch","then","response","json","artworkArrs","map","ele","id","medium","dimensionsIN","dimensions","in","text","dimensionsCM","cm","forEach","artwork","localStorage","setItem","JSON","stringify","paintings","slice","filter","painting","trim","toLowerCase","includes","key","type","onChange","placeholder","length","PaintingDetail","viewLarge","open","params","match","localStorageRef","getItem","paintingID","parse","find","Fragment","Router","exact","path","component","Boolean","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1a7ccf3b.chunk.js","sourcesContent":["import React from \"react\";\n\nconst NotFound = () => (\n\t<div>\n\t\t<h2>Ooops there doesn't seem to be any paintings with this filter</h2>\n\t</div>\n);\n\nexport default NotFound;\n","import React from \"react\";\n\nclass Painting extends React.Component {\n\tnavigateToDetail = () => {\n\t\tthis.props.history.push(`/${this.props.slug}`);\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div className='thumbnail-wrapper' onClick={this.navigateToDetail}>\n\t\t\t\t<img\n\t\t\t\t\tclassName='thumbnail'\n\t\t\t\t\tsrc={this.props.thumbnail}\n\t\t\t\t\talt={this.props.title}\n\t\t\t\t/>\n\t\t\t\t<div className='thumbnail-meta-data'>\n\t\t\t\t\t<strong>{this.props.title}</strong> ({this.props.date})\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Painting;\n","import React from \"react\";\n\nclass Header extends React.Component {\n\tnavigateToHome = () => {\n\t\twindow.location = \"/\";\n\t};\n\trender() {\n\t\treturn (\n\t\t\t<header onClick={this.navigateToHome}>\n\t\t\t\t<h1>Musuem of Paintings</h1>\n\t\t\t</header>\n\t\t);\n\t}\n}\n\nexport default Header;\n","import React from \"react\";\nimport Painting from \"./Painting\";\n\nimport Header from \"./Header\";\nimport NotFound from \"./NotFound\";\n\nclass PaintingGrid extends React.Component {\n\t_isMounted = false;\n\n\tstate = {\n\t\tartworks: [],\n\t\tdisplayCount: 9,\n\t\tsearchQuery: \"\"\n\t};\n\n\thandleScroll = () => {\n\t\tvar lastPainting = document.querySelector(\n\t\t\t\".grid-wrapper > .thumbnail-wrapper:last-child\"\n\t\t);\n\n\t\tif (!lastPainting) {\n\t\t\treturn;\n\t\t}\n\t\tvar lastPaintingOffset = lastPainting.offsetTop + lastPainting.clientHeight;\n\t\tvar pageOffset = window.pageYOffset + window.innerHeight;\n\t\tif (pageOffset > lastPaintingOffset) {\n\t\t\tconst displayCount = this.state.displayCount + 3;\n\t\t\tthis.setState({ displayCount });\n\t\t}\n\t};\n\n\tcomponentDidMount() {\n\t\tthis._isMounted = true;\n\t\t// getData\n\t\tthis.getData();\n\n\t\t// add event listner when user scrolls\n\t\twindow.addEventListener(\"scroll\", e => {\n\t\t\tthis.handleScroll(e);\n\t\t});\n\t}\n\n\tgetData() {\n\t\tfetch(\n\t\t\t\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/207241/artsy-example.json\"\n\t\t)\n\t\t\t.then(response => {\n\t\t\t\treturn response.json();\n\t\t\t})\n\t\t\t.then(response => {\n\t\t\t\t// convert response to desired object type\n\t\t\t\tconst artworkArrs = response[\"_embedded\"][\"artworks\"];\n\t\t\t\tif (this._isMounted) {\n\t\t\t\t\tconst artworks = artworkArrs.map(ele => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tid: ele.id,\n\t\t\t\t\t\t\tslug: ele.slug,\n\t\t\t\t\t\t\ttitle: ele.title,\n\t\t\t\t\t\t\tdate: ele.date,\n\t\t\t\t\t\t\tthumbnail: ele[\"_links\"][\"thumbnail\"][\"href\"],\n\t\t\t\t\t\t\tmedium: ele.medium,\n\t\t\t\t\t\t\tdimensionsIN: ele.dimensions.in.text,\n\t\t\t\t\t\t\tdimensionsCM: ele.dimensions.cm.text\n\t\t\t\t\t\t};\n\t\t\t\t\t});\n\n\t\t\t\t\t// save to localStorage so we no need to make call next time\n\t\t\t\t\tartworks.forEach(artwork => {\n\t\t\t\t\t\tlocalStorage.setItem(artwork.slug, JSON.stringify(artwork));\n\t\t\t\t\t});\n\n\t\t\t\t\t// change state\n\t\t\t\t\tthis.setState({ artworks });\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tcomponentWillUnmount() {}\n\n\thandleSearch = event => {\n\t\tconst searchQuery = event.currentTarget.value;\n\n\t\tconst displayCount = 9;\n\t\tthis.setState({ searchQuery, displayCount });\n\t};\n\trender() {\n\t\tconst paintings = this.state.artworks\n\t\t\t.slice(0, this.state.displayCount)\n\t\t\t.filter(painting => {\n\t\t\t\tif (this.state.searchQuery.trim() === \"\") {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\treturn painting.title\n\t\t\t\t\t.toLowerCase()\n\t\t\t\t\t.includes(this.state.searchQuery.toLowerCase());\n\t\t\t})\n\t\t\t.map(painting => {\n\t\t\t\treturn (\n\t\t\t\t\t<Painting\n\t\t\t\t\t\tkey={painting.id}\n\t\t\t\t\t\t{...painting}\n\t\t\t\t\t\thistory={this.props.history}></Painting>\n\t\t\t\t);\n\t\t\t});\n\n\t\treturn (\n\t\t\t<div className='wrapper'>\n\t\t\t\t<Header />\n\t\t\t\t<input\n\t\t\t\t\tclassName='search-bar'\n\t\t\t\t\ttype='text'\n\t\t\t\t\tonChange={this.handleSearch}\n\t\t\t\t\tplaceholder='Search...'\n\t\t\t\t\tvalue={this.props.searchQuery}\n\t\t\t\t/>\n\t\t\t\t<div className='grid-wrapper'>{paintings}</div>\n\t\t\t\t{paintings.length || this.state.searchQuery === \"\" ? \"\" : <NotFound />}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default PaintingGrid;\n","import React from \"react\";\nimport Header from \"./Header\";\nclass PaintingDetail extends React.Component {\n\t_isMounted = false;\n\tstate = {\n\t\tpainting: {}\n\t};\n\n\tcomponentDidMount() {\n\t\tthis._isMounted = true;\n\n\t\tconst { params } = this.props.match;\n\t\t// first reinstate our localStorage\n\t\tconst localStorageRef = localStorage.getItem(params.paintingID);\n\t\tif (localStorageRef) {\n\t\t\tthis.setState({ painting: JSON.parse(localStorageRef) });\n\t\t} else {\n\t\t\t// make call\n\t\t\tthis.getData();\n\t\t}\n\t}\n\n\tgetData() {\n\t\tfetch(\n\t\t\t\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/207241/artsy-example.json\"\n\t\t)\n\t\t\t.then(response => {\n\t\t\t\treturn response.json();\n\t\t\t})\n\t\t\t.then(response => {\n\t\t\t\t// convert response to desired object type\n\t\t\t\tconst artworkArrs = response[\"_embedded\"][\"artworks\"];\n\t\t\t\tif (this._isMounted) {\n\t\t\t\t\tconst artworks = artworkArrs.map(ele => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tid: ele.id,\n\t\t\t\t\t\t\tslug: ele.slug,\n\t\t\t\t\t\t\ttitle: ele.title,\n\t\t\t\t\t\t\tdate: ele.date,\n\t\t\t\t\t\t\tthumbnail: ele[\"_links\"][\"thumbnail\"][\"href\"],\n\t\t\t\t\t\t\tmedium: ele.medium,\n\t\t\t\t\t\t\tdimensionsIN: ele.dimensions.in.text,\n\t\t\t\t\t\t\tdimensionsCM: ele.dimensions.cm.text\n\t\t\t\t\t\t};\n\t\t\t\t\t});\n\n\t\t\t\t\t// save to localStorage so we no need to make call next time\n\t\t\t\t\tartworks.forEach(artwork => {\n\t\t\t\t\t\tlocalStorage.setItem(artwork.slug, JSON.stringify(artwork));\n\t\t\t\t\t});\n\n\t\t\t\t\tconst paintingID = this.props.match.params.paintingID;\n\t\t\t\t\tconst painting = artworks.find(\n\t\t\t\t\t\tpainting => painting.slug === paintingID\n\t\t\t\t\t);\n\n\t\t\t\t\t// change state\n\t\t\t\t\tthis.setState({ painting });\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tviewLarge = () => {\n\t\twindow.open(this.state.painting.thumbnail);\n\t};\n\n\trender() {\n\t\tconst painting = this.state.painting;\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<Header />\n\n\t\t\t\t<div className='detail'>\n\t\t\t\t\t<img\n\t\t\t\t\t\tonClick={this.viewLarge}\n\t\t\t\t\t\tclassName='painting-detail'\n\t\t\t\t\t\tsrc={this.state.painting.thumbnail}\n\t\t\t\t\t\talt={this.state.painting.title}\n\t\t\t\t\t/>\n\t\t\t\t\t<div className='detail-meta'>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t<strong>{painting.title}</strong>\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<p>{painting.medium}</p>\n\t\t\t\t\t\t<p className='dimensions'>{painting.dimensionsIN}</p>\n\t\t\t\t\t\t<p className='dimensions'>{painting.dimensionsCM}</p>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n}\n\nexport default PaintingDetail;\n","import React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport NotFound from \"./NotFound\";\nimport PaintingGrid from \"./PaintingGrid\";\nimport PaintingDetail from \"./PaintingDetail\";\n\nconst Router = () => (\n\t<BrowserRouter>\n\t\t<Switch>\n\t\t\t<Route exact path='/' component={PaintingGrid} />\n\t\t\t<Route path='/:paintingID' component={PaintingDetail} />\n\t\t\t<Route component={NotFound} />\n\t\t</Switch>\n\t</BrowserRouter>\n);\n\nexport default Router;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Router from \"./components/Router\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Router />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}